name: Build Optimization and Caching

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  optimize-builds:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure build cache
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache-${{ matrix.component }}
        key: ${{ runner.os }}-buildx-${{ matrix.component }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-${{ matrix.component }}-

    - name: Build and cache backend
      if: matrix.component == 'backend'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64
        push: false
        cache-from: type=local,src=/tmp/.buildx-cache-backend
        cache-to: type=local,dest=/tmp/.buildx-cache-backend-new,mode=max
        tags: gamechat-ai-backend:cache-test
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Build and cache frontend
      if: matrix.component == 'frontend'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/amd64
        push: false
        cache-from: type=local,src=/tmp/.buildx-cache-frontend
        cache-to: type=local,dest=/tmp/.buildx-cache-frontend-new,mode=max
        tags: gamechat-ai-frontend:cache-test
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Move cache
      run: |
        rm -rf /tmp/.buildx-cache-${{ matrix.component }}
        mv /tmp/.buildx-cache-${{ matrix.component }}-new /tmp/.buildx-cache-${{ matrix.component }}

  dependency-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Analyze Python dependencies
      run: |
        echo "=== Python Dependencies Analysis ==="
        if [ -f "requirements.txt" ]; then
          echo "üìã Total packages: $(wc -l < requirements.txt)"
          echo "üîç Security scan suggestions:"
          echo "  - Consider using poetry or pipenv for better dependency management"
          echo "  - Regularly update dependencies with: pip-review --auto"
          echo "  - Pin specific versions for production stability"
        fi

    - name: Analyze Node.js dependencies
      run: |
        echo "=== Node.js Dependencies Analysis ==="
        if [ -f "frontend/package.json" ]; then
          cd frontend
          echo "üìã Dependencies:"
          npm list --depth=0 --json 2>/dev/null | jq -r '.dependencies | keys | length' || echo "Cannot determine count"
          echo "üîç Security scan:"
          npm audit --audit-level=moderate || true
          echo "üí° Optimization suggestions:"
          echo "  - Use npm ci in production instead of npm install"
          echo "  - Consider using npm-check-updates to update dependencies"
          echo "  - Bundle analysis with next bundle-analyzer"
        fi

  size-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend for size analysis
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64
        push: false
        tags: gamechat-ai-backend:size-test
        outputs: type=docker,dest=/tmp/backend-image.tar

    - name: Build frontend for size analysis
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/amd64
        push: false
        tags: gamechat-ai-frontend:size-test
        outputs: type=docker,dest=/tmp/frontend-image.tar

    - name: Analyze image sizes
      run: |
        echo "=== Docker Image Size Analysis ==="
        echo "üì¶ Backend image size:"
        ls -lh /tmp/backend-image.tar
        echo "üì¶ Frontend image size:"
        ls -lh /tmp/frontend-image.tar
        
        echo ""
        echo "üí° Size optimization tips:"
        echo "  - Use multi-stage builds (already implemented)"
        echo "  - Use alpine-based images where possible"
        echo "  - Remove unnecessary dependencies"
        echo "  - Use .dockerignore to exclude unnecessary files"
        
        # Load and inspect images
        docker load -i /tmp/backend-image.tar
        docker load -i /tmp/frontend-image.tar
        
        echo ""
        echo "üîç Backend layers:"
        docker history gamechat-ai-backend:size-test --no-trunc
        
        echo ""
        echo "üîç Frontend layers:"
        docker history gamechat-ai-frontend:size-test --no-trunc
