name: Deploy to Production

on:
  workflow_run:
    workflows: ["Comprehensive Testing Pipeline"]
    types: [completed]
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      skip_tests:
        description: 'Skip test validation (emergency only)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write
  pull-requests: write
  statuses: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Backend build and test
    - name: Extract backend metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./backend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Frontend build and test
    - name: Extract frontend metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Run tests after successful build
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt --timeout 300 --retries 3

    - name: Run backend tests
      run: |
        cd backend && python -m pytest app/tests/ -v

    - name: Run type check
      run: |
        python -m mypy backend/app --config-file mypy.ini --exclude 'backend/app/tests'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install Node.js dependencies
      run: |
        echo "Checking frontend directory..."
        ls -la frontend/ || echo "Frontend directory not found"
        if [ -d "frontend" ]; then
          cd frontend
          npm ci --prefer-offline --no-audit
        else
          echo "‚ö†Ô∏è Frontend directory not found, skipping npm install"
        fi

    - name: Run frontend tests
      run: |
        echo "Checking frontend directory for tests..."
        if [ -d "frontend" ]; then
          cd frontend
          npm run lint || true
          npm test || true
        else
          echo "‚ö†Ô∏è Frontend directory not found, skipping frontend tests"
        fi

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-test.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-test.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: '.'

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup deployment configuration
      id: config
      run: |
        ENV=${{ github.event.inputs.environment || 'production' }}
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        if [ "$ENV" = "production" ]; then
          echo "compose-file=docker-compose.prod.yml" >> $GITHUB_OUTPUT
          echo "url=https://your-production-domain.com" >> $GITHUB_OUTPUT
        else
          echo "compose-file=docker-compose.yml" >> $GITHUB_OUTPUT
          echo "url=https://your-staging-domain.com" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to server
      id: deploy
      env:
        BACKEND_IMAGE: ${{ needs.build-and-test.outputs.backend-image }}
        FRONTEND_IMAGE: ${{ needs.build-and-test.outputs.frontend-image }}
        COMPOSE_FILE: ${{ steps.config.outputs.compose-file }}
      run: |
        echo "Deploying to ${{ steps.config.outputs.environment }}..."
        echo "Backend Image: $BACKEND_IMAGE"
        echo "Frontend Image: $FRONTEND_IMAGE"
        echo "Compose File: $COMPOSE_FILE"
        
        # Here you would typically deploy to your actual server
        # For example, using SSH to connect to your server and run docker-compose
        # ssh user@server "docker-compose -f $COMPOSE_FILE pull && docker-compose -f $COMPOSE_FILE up -d"
        
        echo "url=${{ steps.config.outputs.url }}" >> $GITHUB_OUTPUT

    - name: Health check
      run: |
        echo "Running health checks..."
        # Add actual health check commands here
        # curl -f ${{ steps.deploy.outputs.url }}/health
        # curl -f ${{ steps.deploy.outputs.url }}/api/health

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "‚úÖ Deployment successful to ${{ steps.config.outputs.environment }}"
          echo "üåê URL: ${{ steps.deploy.outputs.url }}"
        else
          echo "‚ùå Deployment failed"
        fi

  performance-test:
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install performance testing dependencies
      run: |
        pip install locust requests

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add your performance test commands here
        # python docs/scripts/test_performance.py

    - name: Generate performance report
      if: always()
      run: |
        echo "Performance test completed"
        # Generate and upload performance reports
