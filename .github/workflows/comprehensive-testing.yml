name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.13'

jobs:
  # ユニットテスト
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Backend Testing
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Backend Dependencies
      if: matrix.component == 'backend'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt --timeout 300 --retries 3
        pip install pytest-cov pytest-html pytest-xvs

    - name: Run Backend Unit Tests
      if: matrix.component == 'backend'
      run: |
        cd backend
        # 環境変数設定（テスト用）
        export TESTING=true
        export LOG_LEVEL=CRITICAL
        
        # カバレッジ付きでテスト実行
        python -m pytest app/tests/services/ \
          --cov=app/services \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=85 \
          --junitxml=test-results.xml \
          -v

    - name: Setup Frontend Testing
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Install Frontend Dependencies
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit

    - name: Run Frontend Unit Tests
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm run test -- --coverage --reporter=junit --outputFile=test-results.xml

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.component }}
        path: |
          ${{ matrix.component }}/test-results.xml
          ${{ matrix.component }}/coverage/
        retention-days: 30

  # インテグレーションテスト
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Integration Tests
      run: |
        cd backend
        export TESTING=true
        export REDIS_URL=redis://localhost:6379
        python -m pytest app/tests/integration/ -v --tb=short

    - name: Test Docker Build Integration
      run: |
        # Dockerイメージビルドテスト
        docker build -f backend/Dockerfile -t test-backend .
        docker build -f frontend/Dockerfile -t test-frontend frontend/
        
        # イメージサイズチェック
        echo "Backend image size:"
        docker images test-backend --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        echo "Frontend image size:"
        docker images test-frontend --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # エンドツーエンドテスト
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        # Backend dependencies
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Frontend dependencies
        cd frontend
        npm ci --prefer-offline --no-audit
        npx playwright install

    - name: Start Application
      run: |
        # バックエンド起動
        cd backend
        export TESTING=true
        export LOG_LEVEL=WARNING
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        
        # フロントエンド起動
        cd frontend
        npm run build
        npm run start &
        
        # サービス起動待機
        sleep 30

    - name: Run E2E Tests
      run: |
        cd frontend
        npx playwright test --reporter=html

    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          frontend/playwright-report/
          frontend/test-results/
        retention-days: 30

  # パフォーマンステスト
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Start Backend for Performance Testing
      run: |
        cd backend
        export TESTING=true
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 20

    - name: Run Performance Tests
      run: |
        # 簡易パフォーマンステスト
        python scripts/testing/simple_performance_test.py
        
        # Locustパフォーマンステスト（短時間）
        locust -f scripts/testing/performance_optimization_test.py \
          --host http://localhost:8000 \
          --users 10 \
          --spawn-rate 2 \
          --run-time 60s \
          --html performance-report.html \
          --headless

    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-results
        path: |
          performance-report.html
          *.json
        retention-days: 30

  # テスト結果統合
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    if: always()

    steps:
    - name: Download All Test Results
      uses: actions/download-artifact@v3

    - name: Generate Test Summary
      run: |
        echo "# 🧪 Test Summary Report" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results Overview" >> test-summary.md
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> test-summary.md
        echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "**Overall Status**: ${{ job.status }}" >> test-summary.md
        
        # テスト結果ファイルの確認
        echo "## Artifacts Generated" >> test-summary.md
        find . -name "*.xml" -o -name "*.html" -o -name "*.json" | head -20 >> test-summary.md

    - name: Upload Test Summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30

    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const testSummary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });
