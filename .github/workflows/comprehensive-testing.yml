name: Comprehensive Testing Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write
  packages: read
  statuses: write
  checks: write

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.13'
  # External API credentials (from GitHub Secrets)
  UPSTASH_VECTOR_REST_URL: ${{ secrets.UPSTASH_VECTOR_REST_URL }}
  UPSTASH_VECTOR_REST_TOKEN: ${{ secrets.UPSTASH_VECTOR_REST_TOKEN }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  # ユニットテスト
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Backend Testing
      if: matrix.component == 'backend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Backend Dependencies
      if: matrix.component == 'backend'
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt --timeout 300 --retries 3
        pip install pytest-cov pytest-html

    - name: Run Backend Unit Tests
      if: matrix.component == 'backend'
      run: |
        cd backend
        # 環境変数設定（テスト用）
        export TESTING=true
        export LOG_LEVEL=CRITICAL
        
        # カバレッジ付きでテスト実行
        # 現在のカバレッジ: 39% → 目標: 段階的に60%、80%、85%へ改善
        python -m pytest app/tests/services/ \
          --cov=app/services \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=35 \
          --junitxml=test-results.xml \
          -v

    - name: Setup Frontend Testing
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Cache Frontend Dependencies
      if: matrix.component == 'frontend'
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontend/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Frontend Dependencies
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit

    - name: Run Frontend Unit Tests
      if: matrix.component == 'frontend'
      run: |
        cd frontend
        npm run ci-check

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.component }}
        path: |
          ${{ matrix.component }}/test-results.xml
          ${{ matrix.component }}/coverage/
        retention-days: 30

  # インテグレーションテスト
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt

    - name: Run Integration Tests
      run: |
        cd backend
        export TESTING=true
        export REDIS_URL=redis://localhost:6379
        python -m pytest app/tests/integration/ -v --tb=short

    - name: Test Docker Build Integration
      run: |
        # Dockerイメージビルドテスト
        docker build -f backend/Dockerfile -t test-backend .
        docker build -f frontend/Dockerfile -t test-frontend frontend/
        
        # イメージサイズチェック
        echo "Backend image size:"
        docker images test-backend --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
        echo "Frontend image size:"
        docker images test-frontend --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # エンドツーエンドテスト
  # e2e-tests:
  #   name: End-to-End Tests
  #   runs-on: ubuntu-latest
  #   needs: integration-tests
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #   - name: Setup Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: ${{ env.NODE_VERSION }}
  #   - name: Install browser dependencies
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y \
  #         libnss3 \
  #         libatk-bridge2.0-0 \
  #         libxss1 \
  #         libasound2t64 \
  #         libxshmfence1 \
  #         libgbm1 \
  #         libgtk-3-0 \
  #         libglu1-mesa \
  #         libx264-dev \
  #         libgles2
  #   - name: Cache Node Dependencies
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.npm
  #         frontend/node_modules
  #       key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
  #       restore-keys: |
  #         ${{ runner.os }}-node-
  #   - name: Setup Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ env.PYTHON_VERSION }}
  #       cache: 'pip'
  #   - name: Install Dependencies
  #     run: |
  #       # Backend dependencies
  #       python -m pip install --upgrade pip
  #       pip install -r backend/requirements.txt
  #       # Frontend dependencies
  #       cd frontend
  #       npm ci --prefer-offline --no-audit
  #       npx playwright install
  #   - name: Install Playwright browsers
  #     run: npx playwright install --with-deps
  #   - name: Setup test environment
  #     run: |
  #       cp .env.ci .env
  #       mkdir -p /tmp/test_storage
  #       mkdir -p data
  #       mkdir -p logs
  #       echo '{"test": "data"}' > data/data.json
  #       echo '{"test": "embeddings"}' > data/embedding_list.jsonl
  #       echo '{"test": "query_data"}' > data/query_data.json
  #       echo 'Mock results for top-k queries' > data/result_top_k.txt
  #   - name: Start Backend
  #     run: |
  #       export TESTING=true
  #       export LOG_LEVEL=WARNING
  #       export SKIP_STARTUP_CHECKS=true
  #       export MOCK_EXTERNAL_SERVICES=true
  #       cd backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
  #       echo "Waiting for backend to start..."
  #       for i in {1..30}; do
  #         if curl -f -s http://localhost:8000/health >/dev/null 2>&1; then
  #           echo "✅ Backend is ready!"
  #           break
  #         fi
  #         echo "Waiting... ($i/30)"
  #         sleep 2
  #       done
  #   - name: Start Frontend
  #     run: |
  #       cd frontend
  #       echo "Building frontend..."
  #       npm run build
  #       echo "Starting frontend..."
  #       npm run start &
  #       echo "Waiting for frontend to start..."
  #       for i in {1..30}; do
  #         if curl -f -s http://localhost:3000 >/dev/null 2>&1; then
  #           echo "✅ Frontend is ready!"
  #           break
  #         fi
  #         echo "Waiting... ($i/30)"
  #         sleep 2
  #       done
  #   - name: Run E2E Tests
  #     run: |
  #       cd frontend
  #       npx playwright test --reporter=html
  #   - name: Upload E2E Test Results
  #     uses: actions/upload-artifact@v4
  #     if: always()
  #     with:
  #       name: e2e-test-results
  #       path: |
  #         frontend/playwright-report/
  #         frontend/test-results/
  #       retention-days: 30
  # -------------------------------
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install locust

    - name: Start Backend for Performance Testing
      run: |
        cd backend
        export TESTING=true
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 20

    - name: Run Performance Tests
      run: |
        # 簡易パフォーマンステスト
        python scripts/testing/simple_performance_test.py
        
        # Locustパフォーマンステスト（短時間）
        locust -f scripts/testing/performance_optimization_test.py \
          --host http://localhost:8000 \
          --users 10 \
          --spawn-rate 2 \
          --run-time 60s \
          --html performance-report.html \
          --headless

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: |
          performance-report.html
          *.json
        retention-days: 30

  # テスト結果統合
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    # needs: [unit-tests, integration-tests, e2e-tests, performance-tests]
    needs: [unit-tests, integration-tests, performance-tests]
    if: always()

    steps:
    - name: Download All Test Results
      uses: actions/download-artifact@v4

    - name: Generate Test Summary
      run: |
        echo "# 🧪 Test Summary Report" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results Overview" >> test-summary.md
        echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> test-summary.md
        # echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> test-summary.md
        echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "**Overall Status**: ${{ job.status }}" >> test-summary.md
        
        # テスト結果ファイルの確認
        echo "## Artifacts Generated" >> test-summary.md
        find . -name "*.xml" -o -name "*.html" -o -name "*.json" | head -20 >> test-summary.md

    - name: Upload Test Summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30

    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const testSummary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });
