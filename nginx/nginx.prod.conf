events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Enhanced compression settings
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Include MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging with structured format
    log_format main_ext '[$time_local] "$request" $status $bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'rt=$request_time ut="$upstream_response_time"';

    access_log /var/log/nginx/access.log main_ext;
    error_log /var/log/nginx/error.log warn;

    # Backend proxy configuration
    server {
        listen 80;
        server_name _;

        # Health check endpoint
        location /health {
            proxy_pass http://backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Health check specific timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # API endpoints
        location /api/ {
            # Apply rate limiting
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers for API requests
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            # Enhanced timeout settings for LLM operations
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_buffering off;

            # Request size limits
            client_max_body_size 10M;
        }

        # Default route - return simple API info
        location / {
            return 200 '{"service":"gamechat-ai-backend","status":"running","version":"1.0.0"}';
            add_header Content-Type application/json;
        }

        # Nginx status page for monitoring
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow ::1;
            deny all;
        }

        # Error pages
        error_page 429 /429.html;
        location = /429.html {
            return 429 '{"error":"Rate limit exceeded","code":429,"message":"Too many requests"}';
            add_header Content-Type application/json;
        }

        error_page 502 503 504 /50x.html;
        location = /50x.html {
            return 502 '{"error":"Service unavailable","code":502,"message":"Backend service is temporarily unavailable"}';
            add_header Content-Type application/json;
        }
    }

    # Server block for alternative port access
    server {
        listen 80;
        server_name _;
        return 301 http://$host:8080$request_uri;
    }
}
