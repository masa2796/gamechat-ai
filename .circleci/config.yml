version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:20.18
    working_directory: ~/project
  python-executor:
    docker:
      - image: cimg/python:3.13
    working_directory: ~/project

jobs:
  install:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Show directory structure
          command: |
            pwd
            ls -l
            ls -l frontend
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "frontend/package-lock.json" }}
            - v1-dependencies-
      - run:
          name: Configure npm for better network reliability
          command: |
            npm config set registry https://registry.npmjs.org/
            npm config set fetch-retry-mintimeout 20000
            npm config set fetch-retry-maxtimeout 120000
            npm config set fetch-retries 3
            npm config set fetch-timeout 300000
      - run:
          name: Install dependencies with retry
          command: |
            cd frontend
            npm ci --prefer-offline --no-audit --progress=false || \
            (sleep 10 && npm ci --prefer-offline --no-audit --progress=false) || \
            (sleep 30 && npm ci --no-audit --progress=false)
      - save_cache:
          key: v1-dependencies-{{ checksum "frontend/package-lock.json" }}
          paths:
            - frontend/node_modules
      - persist_to_workspace:
          root: frontend
          paths:
            - node_modules

  build:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build
          command: cd frontend && npm run build

  start-server:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: frontend
      - run:
          name: Build
          command: |
            cd frontend
            echo "Node.js version: $(node --version)"
            echo "npm version: $(npm --version)"
            echo "Environment variables:"
            env | grep -E "(CI|NODE_ENV|NEXT_)" || echo "No relevant env vars found"
            echo "Building application..."
            npm run build
            echo "Build completed. Checking output..."
            ls -la .next/ || echo ".next directory not created"
      - run:
          name: Start server in background
          command: |
            cd frontend
            echo "Starting Next.js server..."
            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la
            echo "Check if .next directory exists:"
            ls -la .next/ || echo ".next directory not found"
            echo "Starting server with verbose output..."
            nohup npm run start:ci > server.log 2>&1 &
            echo $! > server.pid
            echo "Server PID: $(cat server.pid)"
            sleep 5
            echo "Initial server log content:"
            cat server.log || echo "No server logs yet"
      - run:
          name: Wait for server to start
          command: |
            cd frontend
            timeout=60
            counter=0
            echo "Waiting for server to start..."
            while [ $counter -lt $timeout ]; do
              # Check if process is still running
              if [ -f server.pid ]; then
                pid=$(cat server.pid)
                if ps -p $pid > /dev/null 2>&1; then
                  echo "Server process $pid is running"
                else
                  echo "Server process $pid has died"
                  echo "Server logs:"
                  cat server.log || echo "No server logs found"
                  exit 1
                fi
              else
                echo "No server.pid file found"
                exit 1
              fi
              
              # Check if server is responding
              if curl -f -s http://localhost:3000 > /dev/null 2>&1; then
                echo "Server is ready!"
                # Try API health check if available
                if curl -f -s http://localhost:3000/api/health > /dev/null 2>&1; then
                  echo "API health check passed"
                  curl -s http://localhost:3000/api/health | head -5
                else
                  echo "API health check not available (this may be normal for Next.js app)"
                fi
                exit 0
              fi
              echo "Waiting for server... ($counter/$timeout)"
              echo "Current server log tail:"
              tail -5 server.log || echo "No server logs available"
              sleep 2
              counter=$((counter + 2))
            done
            echo "Server failed to start within $timeout seconds"
            echo "Full server logs:"
            cat server.log || echo "No server logs found"
            echo "Process status:"
            ps aux | grep -v grep | grep node || echo "No node processes found"
            echo "Port 3000 status:"
            netstat -an | grep :3000 || echo "Port 3000 not in use"
            exit 1

  test:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Lint
          command: cd frontend && npm run lint
      - run:
          name: Test
          command: cd frontend && npm test

  backend-test:
    executor: python-executor
    environment:
      LOG_DIR: ./logs
      ENVIRONMENT: test
      LOG_LEVEL: WARNING
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-python-dependencies-{{ checksum "requirements.txt" }}
            - v1-python-dependencies-
      - run:
          name: Set up venv and install dependencies
          command: |
            python -m venv .venv
            . .venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt --timeout 300 --retries 3
            which python
            which pytest
      - save_cache:
          key: v1-python-dependencies-{{ checksum "requirements.txt" }}
          paths:
            - .venv
      - run:
          name: Run backend tests
          command: |
            . .venv/bin/activate
            cd backend && python -m pytest app/tests/ -v
      - run:
          name: Run type check
          command: |
            . .venv/bin/activate
            mypy backend/app --config-file mypy.ini --exclude 'backend/app/tests'

workflows:
  version: 2
  frontend-ci:
    jobs:
      - install
      - build:
          requires:
            - install
      - test:
          requires:
            - build
      - start-server:
          requires:
            - build
      - backend-test