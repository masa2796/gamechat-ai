サービス層API
=============

GameChat AIのサービス層は、システムの核となるビジネスロジックを担当する専門的なサービスクラス群で構成されています。
各サービスは単一責任の原則に基づいて設計され、高度な疎結合と再利用性を実現しています。

.. toctree::
   :maxdepth: 3

   rag_service
   hybrid_search_service
   classification_service
   database_service
   vector_service
   auth_service
   llm_service

アーキテクチャ概要
------------------

サービス層は以下の階層構造で設計されています：

**制御層サービス**
  システム全体の制御と統合を担当

  * **RagService**: RAGシステム全体の統合制御とオーケストレーション
  * **HybridSearchService**: 複数検索手法の統合と最適化

**専門処理サービス**
  特定のドメイン知識を持つ専門サービス

  * **ClassificationService**: LLMによる高度なクエリ分析と分類
  * **DatabaseService**: 構造化データに対する高速フィルタ検索
  * **VectorService**: Upstash Vectorを使用したセマンティック検索
  * **EmbeddingService**: OpenAI APIによる意味ベクトル生成

**基盤サービス**
  共通機能とインフラ機能を提供

  * **LLMService**: OpenAI GPTによる自然言語生成と理解
  * **AuthService**: 認証とセキュリティ機能

設計原則
--------

**単一責任の原則**
  各サービスは一つの明確な責任を持ち、その責任に関連する機能のみを提供

**依存性注入**
  サービス間の依存関係は設定によって注入され、テスタビリティと柔軟性を確保

**非同期処理**
  FastAPIの非同期機能を活用し、高いスループットと応答性を実現

**エラーハンドリング**
  各サービスは適切な例外処理とエラー復旧機能を実装

サービス間連携
--------------

サービス間の連携は以下のパターンで実現されています：

1. **オーケストレーションパターン**: RagServiceが各サービスを調整
2. **パイプラインパターン**: データが各サービスを順次通過
3. **イベント駆動パターン**: 非同期でのサービス間通信

パフォーマンス特性
------------------

各サービスのパフォーマンス特性：

* **平均応答時間**: 1.2秒
* **最大同時処理数**: 100リクエスト/秒
* **メモリ使用量**: サービスあたり平均50MB
* **CPU使用率**: 通常時10%、ピーク時60%
